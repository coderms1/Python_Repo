# Password Validator Round 8 (stupid version)

def validate_password(sPassword, sInitials):
    """
    This function performs validation checks on the password and
    collects error messages if any rules are violated, including repeated characters.
    """

    # Dictionary to store validation rules and corresponding error messages
    validation_checks = {
        "check 1": {"rule": (8 <= len(sPassword) <= 12), "message": "Password must be between 8 and 12 characters."},
        "check 2": {"rule": not (sPassword.startswith("Pass") or sPassword.startswith("pass")), "message": "Password can't start with Pass."},
        "check 3": {"rule": False, "message": "Password must contain at least 1 uppercase letter."},
        "check 4": {"rule": False, "message": "Password must contain at least 1 lowercase letter."},
        "check 5": {"rule": False, "message": "Password must contain at least 1 number."},
        "check 6": {"rule": False, "message": "Password must contain at least 1 of these special characters: ! @ # $ % ^"},
        "check 7": {"rule": sInitials.lower() not in sPassword.lower(), "message": f"Password must not contain user initials: {sInitials}"}
    }

    # List to store any violated rules
    violations = []
    
    # Check for password characteristics manually
    has_upper = False
    has_lower = False
    has_digit = False
    has_special = False
    special_chars = "!@#$%^"

    for letter in sPassword:
        if letter.isupper():
            has_upper = True
        if letter.islower():
            has_lower = True
        if letter.isdigit():
            has_digit = True
        if letter in special_chars:
            has_special = True

    # Update validation checks based on results
    validation_checks["check 3"]["rule"] = has_upper
    validation_checks["check 4"]["rule"] = has_lower
    validation_checks["check 5"]["rule"] = has_digit
    validation_checks["check 6"]["rule"] = has_special

    # Check for violations in validation rules
    for check, result in validation_checks.items():
        if not result["rule"]:
            violations.append(result["message"])

    # Step 8: Check for repeated characters
    char_count = {}
    for letter in sPassword:
        lower_letter = letter.lower()  # Convert to lowercase for case-insensitive counting
        if lower_letter in char_count:
            char_count[lower_letter] += 1
        else:
            char_count[lower_letter] = 1

    # Find characters that appear more than once and display them
    repeated_chars = {}
    for letter, count in char_count.items():
        if count > 1:
            repeated_chars[letter] = count
    
    if repeated_chars:
        violation_message = "The following characters appear more than once:\n"
        for letter, count in repeated_chars.items():
            violation_message += f"{letter}: {count} times\n"
        violations.append(violation_message)

    # If there are violations, display each error message
    if violations:
        print("Password validation failed due to the following:")
        for violation in violations:
            print(f"- {violation.strip()}")
        return False
    else:
        # If no violations, the password is valid
        print("Password is valid and OK to use.")
        return True


def extract_names(sName):
    """
    This function manually extracts the first and last name from the user's input
    using indexing and a loop.
    """
    space_index = sName.find(" ")  # Find the index of the space
    first_name = ""
    last_name = ""

    # Loop through the characters to construct the first name and last name
    for i in range(len(sName)):
        if i == 0:  # Capitalize the first character for the first name
            first_name += sName[i].upper()  # First initial
        elif i < space_index and sName[i] != " ":  # Append characters to the first name
            first_name += sName[i].lower()  # Lowercase remaining characters
        elif i > space_index and sName[i] != " ":  # Characters after the space belong to the last name
            last_name += sName[i].lower()  # Lowercase characters for the last name

    return first_name, last_name


def main():
    """
    The main function handles user input and orchestrates the password validation process.
    """
    
    # Step 1: Prompt user for first and last name
    sName = input("Enter your first and last name: ")
    
    # Step 4: Extract initials from the first and last name using the manual method
    first_name, last_name = extract_names(sName)
    
    # Ensure first and last name have been entered
    if not first_name or not last_name:
        print("Please enter both a first and last name.")
        return
    
    sInitials = first_name[0].upper() + last_name[0].upper()  # Combine first initials from both names
    
    # Step 2: Loop until a valid password is entered or user chooses to exit
    while True:
        # Step 3: Prompt for the desired password
        sPassword = input("Enter your password (or press Enter to exit): ")
        
        # Exit if the user presses Enter without entering a password
        if sPassword == "":
            print("No password entered. Exiting the program.")
            break
        
        # Call the validate_password function to perform all checks
        if validate_password(sPassword, sInitials):
            # Step 13: Exit loop if password is valid
            break

# Call the main function directly
main()
