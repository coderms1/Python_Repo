[[####-->>PYTHON ASSIGNMENT NOTES<<--####]]
___________________________________________


!!!!!--->>> LOOK UP REGEX <<<---!!!!!
-------------------------------------

PASSWORD VALIDATOR: 

 C Python Professor Brian Candido STCC
1
Password Validator
During this semester you learned the Python topics of variables, conversions, arithmetic statements, logical
constructs, looping constructs, functions, lists and string methods. This final project is the culmination of all those
topics for you to demonstrate all that you have learned during the past 15 weeks.
Note: You can NOT USE Python’s Regular Expression Operations known better as regex. You can only use what
you learned in this class:
-variables
-conversions
-arithmetic statements
-logical constructs
-looping constructs
-functions
-lists
-string methods
Use Python String functions to build a program to do the following to perform Password Validation. Make sure you
use the examples Professor Candido has provided and use the Python String Functions document found in Week
15. These are the required 12 coding steps:
1. Prompt the user for their First and Last name and store the input into a variable called sName.
2. Code a loop that will keep asking for a password UNTIL a valid password in entered.
3. Prompt the user for their desired password and store their response in a variable called sPassword.
4. Extract out the first initial from the first name and the first initial of the last name from the variable sName
and put in a new variable called sInitials. For example if Brian Candido is in the sName variable then the
sInitials should contain BC. You can assume the user will enter 1 first name and 1 last name.
5. Check to make sure the sPassword length is between 8 and 12 characters. If the password is not within
the required length write out the message: Password must be between 8 and 12 characters.
6. Check to make sure the sPassword starts does not start with Pass or pass. If not write out the Password
can’t start with Pass.
7. Check to make sure the sPassword contains at least 1 uppercase letter A through Z. If not write out the
message: Password must contain at least 1 uppercase letter.
8. Check to make sure the sPassword contains at least 1 lowercase letter a through z. If not write out the
message: Password must contain at least 1 lowercase letter.
9. Check to make sure the sPassword contains at least 1 number between 0 and 9. If not write out the
message: Password must contain at least 1 number.
10. Check to make sure the sPassword contains at least 1 of these special characters: ! @ # $ % ^. If not write
out the message: Password must contain at least 1 of these special characters: ! @ # $ % ^
11. Check to make sure the sPassword does not contain the value of sInitials within the string. For example
sPassword cannot contain BC or bc or any variation of BC so you will need to convert to either lowercase
or uppercase than compare using Python string functions. If not write out the message: Password must not
contain user initials.
12. No character can be present more than once. Write code to process each character in the password and keep
track of how many occurrences are present. If any character (either uppercase or lowercase versions) is in
the password more than 1 output the character and how many occurrences and print out the message: These
characters appear more than once:
13. If sPassword passes all the above checks output this message: Password is valid and OK to use. And exit
the loop.
14. Make sure your code has a main() function. It is your optional choice if you want additional functions.
Sample Output
Password is not valid:
 C Python Professor Brian Candido STCC
2
Password is not valid:
Password is not valid:
Password is not valid:
Password is valid:
Grading Rubric
Criteria Meets
(100%)
Somewhat
(50%)
Not Present
(0%)
Password
validations steps
4 through 10 are
All String validation
requirements stated
in the instructions
Some of String validation
requirements stated in
the instructions Steps 3
String validation
requirements stated in
the instructions Steps 3
 C Python Professor Brian Candido STCC
3
coded using
Python String
functions.
70 points
Steps 3 through 9
are present,
functioning and
coded efficiently.
through 9 are attempted
and mostly functioning.
through 9 are not
implemented.
Code to make
sure the Password
does not contain
the user’s initials
(step 11).
10 points
The code to detect
the user’s initials is
present and coded
correctly.
The code to detect the
user’s initials is
attempted and partially
works.
The code to detect the
user’s initials is not
present.
Code to check for
repeating
characters (step
12).
15 points
The code to detect
repeating
characters is
present and coded
correctly.
The code to detect
repeating characters is
attempted and partially
works.
The code to detect
repeating characters is
not present.
Comments,
Formatting
and
Variable Prefixing
and main()
function is coded
and Password
Input loop is
coded.
5 points
Comments present
and variable
prefixing.
Output was
correctly formatted
per the sample.
main() is present.
Input Loop is
present.
Either Comments present
or variable prefixing.
Output was attempted
but did not match the
sample.
main() is attempted.
Input Loop is present
attempted.
No Comments present
and No variable
prefixing.
No formatting was
attempted.
main() is not present.
No Input Loop is
present.
Note: You can NOT USE Python’s Regular Expression Operations known better as regex. You can only use what
you learned in this class:
-variables
-conversions
-arithmetic statements
-logical constructs
-looping constructs
-functions
-lists
-string methods
Any code used that was not covered in this class will earn you a 0 for this Final Project.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
////////////////////////////////////////////////
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

In coding Logical or Conditional Statements are features of a programming language, which perform different computations or actions depending on whether a programmer-specified condition is either true or false.
This is achieved by selectively altering the control flow based on some condition.  For example below only ONE of the things can occur not both. Depending on if A is true B will happen.  If A is false then C will happen.  B and C both can not occur.  Imagine you are driving your car into stop sign point A.  You can only go right or left and not both ways.

****If Statement Flow Chart****

To start with Python supports these Logical Statements:
if
if else
if elif
To compare variable you can use these Logical Operators:

==  equal to notice it is two == signs.  
The one equal sign is to assign a value to a variable

!=   not equal to
<    less than
>    greater than
<=  less than or equal to
>=  greater than or equal to

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
////////////////////////////////////////////////
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Write a Python program to calculate someone’s pay for the week.

1. Ask the user for input and receive and convert to proper data types.

-How many hours they worked during the week.  What data type are you thinking would be best and make sure to convert the input to that data type.

-What is their pay rate. What data type are you thinking would be best and make sure to convert the input to that data type.

2. Write logical statements to do the following to calculate:

-Regular Pay: Any hours worked 1 - 40 they get hours worked * hourly rate. 

-Overtime Pay: If they worked over 40 to 60 hours they get time and half for those hours.

-Doubletime Pay: Any hours over 60 is paid at a double time rate. 

For example:
Dan worked 39 hours at $15 his pay would be:
 39 * 15 = $585.00

Joe worked 55 hours at $20 his pay would be:
 (40 * 20) + (15 *  (20 * 1.5) = 800 + 450 = $1250

Lou worked 65 hours at $35 his pay would be:
 (40 * 35) + (20 *  (35 * 1.5) + (5 * (35 * 2)  = 1400 + 1050  + 350 = $2800


3. Output the Regular Pay, Overtime Pay and Doubletime Pay to the screen.
4. Try to write the code as efficient as possible. This means the code should be understandable, executes efficiently and has little to no redundancy.

Sample Output:

Enter hours worked: 39
Enter hourly rate: 15
Regular Pay is: $ 585.00
Time and Half Pay is: $ 0.00
Double Time Pay is: $ 0.00
Total Pay is: $ 585.00

===== Sample 2 =====
Enter hours worked: 55
Enter hourly rate: 20
Regular Pay is: $ 800.00
Time and Half Pay is: $ 450.00
Double Time Pay is: $ 0.00
Total Pay is: $ 1,250.00

===== Sample 3 =====
Enter hours worked: 65
Enter hourly rate: 35
Regular Pay is: $ 1,400.00
Time and Half Pay is: $ 1,050.00
Double Time Pay is: $ 350.00
Total Pay is: $ 2,800.00

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
////////////////////////////////////////////////
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Dog Age Calculator with If Logic...
 When we first wrote the Dog Age Calculator it was to gain  practice using Python's functions: input(), int(), float()
 format() and arithmetic operators.

 Now we will enhance the initial Dog Age to include more accurate
 Calculations:
 1. The first year of a dog's age is actually equal to 12 human years
 2. Every years after the first year is 7.3 years.

 For example:
 A dog that is .5 (6 months old) would be 6 = .5 x 12

 A dog that is 13.75 would be 105.075 = (13.75 - 1) * 7.3 + 12

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
////////////////////////////////////////////////
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

###-->>Number Guessing Game<<--###

# Add logic to handle: 
# -Try catch on iGuess
# -Handle when a number < 1 or > 100
# -4 tries to guess

******WHILE LOOP VERSION******

import random 
iTries = 0
iSecretNumber = random.randint(1, 100)
MAX_TRIES = 5
# input loop:
while True: 

    while True:
        try: 
            iGuess = int(input(f"Guess a number from 1 to 100 (guess {iTries} of {MAX_TRIES}): "))
        except ValueError: 
            print("Entry a valid number from 1 to 100")
            continue

        if iGuess < 1 or iGuess > 100: 
            print("Enter a number BETWEEN 1 - 100")
            continue
        else: 
            break

    if iGuess < iSecretNumber: 
        print("Higher...")
    elif iGuess > iSecretNumber:
        print("Lower...")
    else: 
        print("YOU GOT IT!!!")
        break
        
    iTries += 1
    if iTries == MAX_TRIES:
        print("Sorry, you are out of tries.")
        break

******FOR LOOP VERSION******

import random 
iTries = 0
iSecretNumber = random.randint(1, 100)
MAX_TRIES = 5
# input loop:
for iGuessCount in range(1, MAX_TRIES + 1):

    while True:
        try: 
            iGuess = int(input(f"Guess a number from 1 to 100 (guess {iTries} of {MAX_TRIES}): "))
        except ValueError: 
            print("Entry a valid number from 1 to 100")
            continue

        if iGuess < 1 or iGuess > 100: 
            print("Enter a number BETWEEN 1 - 100")
            continue
        else: 
            break

    if iGuess < iSecretNumber: 
        print("Higher...")
    elif iGuess > iSecretNumber:
        print("Lower...")
    else: 
        print("YOU GOT IT!!!")
        break
        
    iTries += 1
    if iTries == MAX_TRIES:
        print("Sorry, you are out of tries.")
        break



import  random

iSecretNumber = random.randint(1, 100)

# Add logic to handle:
#-Try catch on iGuess
#-Handle when a number < 1 or > 100
#-4 tries to guess

MAX_TRIES = 5

iTries = 1
while True:     

    while True: # input loop:
        try:
            iGuess = int(input(f"Guess a number from 1 to 100 (guess {iTries} of {MAX_TRIES}):"))
        except ValueError:
            print("Enter a valid  number from 1 to 100")
            continue

        if iGuess < 1 or iGuess > 100:
            print("Enter a valid  number from 1 to 100")
            continue
        else:
            break

      
    if iGuess < iSecretNumber:
        print("Higher...")
    elif iGuess > iSecretNumber:
        print("Lower...")
    else:
        print("You won!")
        break

    iTries += 1
    if iTries > MAX_TRIES:
        print(f"Sorry you did not guess in {MAX_TRIES} tries or less")
        print(f"The secret number was: {iSecretNumber}")
        break

print("Thanks for playing the game!")

-----------------

import random

iSecretNumber = random.randint(1, 100)

while True:
        iGuess = int(input("Guess a number from 1-100 (type - # to quit): "))
        if iGuess < iSecretNumber:
                print("Too low! Try again!")
        elif iGuess > iSecretNumber:
                print("Too high! Try again!")
        else:
                print("YOU GOT IT!")
                break

